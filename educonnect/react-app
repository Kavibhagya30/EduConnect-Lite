import React, { useState, useEffect } from "react";
import {
  BrowserRouter as Router,
  Routes,
  Route,
  useNavigate,
} from "react-router-dom";
import { initializeApp } from "firebase/app";
import {
  getAuth,
  signInWithPopup,
  GoogleAuthProvider,
} from "firebase/auth";
import { openDB } from "idb";

// Firebase Config
const firebaseConfig = {
  apiKey: "AIzaSyCBi9wudYC4OkzJmc98JcUiQro-LFReLnU",
  authDomain: "educonnect-lite-171aa.firebaseapp.com",
  projectId: "educonnect-lite-171aa",
  storageBucket: "educonnect-lite-171aa.appspot.com",
  messagingSenderId: "511793216219",
  appId: "1:511793216219:web:a89c1644639ec4980feafe",
  measurementId: "G-5JVEQLFDM3",
};

initializeApp(firebaseConfig);
const auth = getAuth();
const provider = new GoogleAuthProvider();

const Login = ({ onLogin }) => {
  const handleLogin = (e) => {
    e.preventDefault();
    signInWithPopup(auth, provider)
      .then((result) => {
        console.log("User signed in:", result.user);
        onLogin();
      })
      .catch((error) => {
        console.error("Login error:", error.message);
        alert("Login failed: " + error.message);
      });
  };

  return (
    <div style={styles.loginContainer}>
      <form>
        <h1 style={{ color: "#792099" }}>EduConnect-Lite</h1>
        <button style={styles.button} type="button" onClick={handleLogin}>
          Login with Google
        </button>
      </form>
    </div>
  );
};

const Dashboard = () => {
  const navigate = useNavigate();
  const items = [
    {
      title: "Chatbot",
      description: "Talk to our AI assistant",
      icon: "üí¨",
      route: "/chatbot",
    },
    {
      title: "Google Docs",
      description: "Create and edit documents",
      icon: "üìÑ",
      route: "/docs",
    },
    {
      title: "Google Drive",
      description: "Store and manage files",
      icon: "üìÅ",
      route: "/drive",
    },
    {
      title: "Resources",
      description: "Access learning materials",
      icon: "üìñ",
      route: "/resources",
    },
  ];

  return (
    <div style={styles.dashboard}>
      {items.map((item, index) => (
        <div
          key={index}
          style={styles.card}
          onClick={() => item.route && navigate(item.route)}
        >
          <span style={styles.icon}>{item.icon}</span>
          <h3>{item.title}</h3>
          <p>{item.description}</p>
        </div>
      ))}
    </div>
  );
};

const Docs = () => {
  const navigate = useNavigate();
  useEffect(() => {
    window.open("https://docs.google.com", "_blank");
    navigate("/");
  }, [navigate]);
  return null;
};

const Drive = () => {
  const navigate = useNavigate();
  useEffect(() => {
    window.open("https://drive.google.com", "_blank");
    navigate("/");
  }, [navigate]);
  return null;
};

const Resources = () => {
  const [resources, setResources] = useState([]);

  useEffect(() => {
    const loadFiles = async () => {
      const db = await openDB("resources-db", 1, {
        upgrade(db) {
          if (!db.objectStoreNames.contains("files")) {
            db.createObjectStore("files", { keyPath: "name" });
          }
        },
      });
      const tx = db.transaction("files", "readonly");
      const store = tx.objectStore("files");
      const allFiles = await store.getAll();
      setResources(allFiles);
    };
    loadFiles();
  }, []);

  const uploadFile = async (e) => {
    const file = e.target.files[0];
    if (!file) return;
    const reader = new FileReader();
    reader.onload = async () => {
      const db = await openDB("resources-db", 1);
      const tx = db.transaction("files", "readwrite");
      const store = tx.objectStore("files");
      await store.put({ name: file.name, content: reader.result });
      const allFiles = await store.getAll();
      setResources(allFiles);
    };
    reader.readAsDataURL(file);
  };

  const downloadFile = (resource) => {
    const link = document.createElement("a");
    link.href = resource.content;
    link.download = resource.name;
    link.click();
  };

  const deleteFile = async (name) => {
    const db = await openDB("resources-db", 1);
    const tx = db.transaction("files", "readwrite");
    const store = tx.objectStore("files");
    await store.delete(name);
    const allFiles = await store.getAll();
    setResources(allFiles);
  };

  return (
    <div style={resourceStyles.container}>
      <h2 style={resourceStyles.title}>Upload Resource</h2>
      <div style={resourceStyles.uploadBox}>
        <label style={resourceStyles.uploadLabel}>
          Choose File
          <input type="file" onChange={uploadFile} style={resourceStyles.uploadInput} />
        </label>
      </div>
      <div style={resourceStyles.resourceList}>
        <h3>Available Offline Resources</h3>
        {resources.length === 0 ? (
          <p style={resourceStyles.noFiles}>No files available.</p>
        ) : (
          resources.map((res) => (
            <div key={res.name} style={resourceStyles.resourceItem}>
              <span style={resourceStyles.fileName}>{res.name}</span>
              <div>
                <button style={resourceStyles.downloadBtn} onClick={() => downloadFile(res)}>
                  Download
                </button>
                <button style={resourceStyles.deleteBtn} onClick={() => deleteFile(res.name)}>
                  Delete
                </button>
              </div>
            </div>
          ))
        )}
      </div>
    </div>
  );
};

const Chatbot = () => {
  const [inputText, setInputText] = useState("");
  const [outputText, setOutputText] = useState("");

  const handleGenerate = async () => {
    const res = await fetch("http://localhost:8000/generate", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ input: inputText }),
    });

    const data = await res.json();
    setOutputText(data.output);
  };

  return (
    <div className="App">
      <h1>Flan-T5 Text Generator</h1>
      <textarea
        rows="4"
        cols="50"
        value={inputText}
        onChange={(e) => setInputText(e.target.value)}
        placeholder="Type your prompt here"
      />
      <br />
      <button onClick={handleGenerate}>Generate</button>
      <h3>Output:</h3>
      <p>{outputText}</p>
    </div>
  );
};

const App = () => {
  const [isLoggedIn, setIsLoggedIn] = useState(false);

  return (
    <Router>
      <Routes>
        <Route path="/" element={isLoggedIn ? <Dashboard /> : <Login onLogin={() => setIsLoggedIn(true)} />} />
        <Route path="/chatbot" element={<Chatbot />} />
        <Route path="/resources" element={<Resources />} />
        <Route path="/docs" element={<Docs />} />
        <Route path="/drive" element={<Drive />} />
      </Routes>
    </Router>
  );
};

const styles = {
  loginContainer: {
    width: "400px",
    margin: "20vh auto",
    backgroundColor: "whitesmoke",
    borderRadius: "5px",
    padding: "30px",
    textAlign: "center",
  },
  button: {
    backgroundColor: "#792099",
    color: "white",
    border: "none",
    borderRadius: "5px",
    padding: "10px",
    fontSize: "20px",
    width: "100%",
    cursor: "pointer",
  },
  dashboard: {
    display: "grid",
    gridTemplateColumns: "repeat(2, 1fr)",
    gap: "20px",
    padding: "20px",
    maxWidth: "600px",
    margin: "auto",
    position: "absolute",
    top: "50%",
    left: "50%",
    transform: "translate(-50%, -50%)",
  },
  card: {
    background: "#f8f9fa",
    padding: "20px",
    borderRadius: "10px",
    textAlign: "center",
    boxShadow: "0px 4px 6px rgba(0, 0, 0, 0.1)",
    transition: "transform 0.2s",
    cursor: "pointer",
  },
  icon: {
    fontSize: "40px",
    display: "block",
    marginBottom: "10px",
  },
};

const resourceStyles = {
  container: {
    padding: "40px 20px",
    maxWidth: "700px",
    margin: "0 auto",
    fontFamily: "Arial, sans-serif",
    textAlign: "center",
    backgroundColor: "#fdfcfe",
    borderRadius: "15px",
    boxShadow: "0px 8px 20px rgba(0,0,0,0.1)",
  },
  title: {
    fontSize: "28px",
    marginBottom: "30px",
    color: "#6b21a8",
  },
  uploadBox: {
    marginBottom: "30px",
  },
  uploadLabel: {
    padding: "12px 20px",
    backgroundColor: "#8b5cf6",
    color: "white",
    borderRadius: "8px",
    cursor: "pointer",
    fontWeight: "bold",
    transition: "background 0.3s",
  },
  uploadInput: {
    display: "none",
  },
  resourceList: {
    textAlign: "left",
  },
  noFiles: {
    fontStyle: "italic",
    color: "#666",
  },
  resourceItem: {
    background: "#f3f0fa",
    borderRadius: "10px",
    padding: "15px 20px",
    marginBottom: "15px",
    display: "flex",
    justifyContent: "space-between",
    alignItems: "center",
    boxShadow: "0px 2px 8px rgba(0, 0, 0, 0.05)",
  },
  fileName: {
    fontWeight: "bold",
    fontSize: "16px",
    color: "#333",
    maxWidth: "60%",
    overflowWrap: "break-word",
  },
  downloadBtn: {
    backgroundColor: "#4ade80",
    border: "none",
    borderRadius: "5px",
    color: "white",
    padding: "8px 12px",
    marginRight: "10px",
    cursor: "pointer",
    fontWeight: "bold",
    transition: "background 0.3s",
  },
  deleteBtn: {
    backgroundColor: "#ef4444",
    border: "none",
    borderRadius: "5px",
    color: "white",
    padding: "8px 12px",
    cursor: "pointer",
    fontWeight: "bold",
    transition: "background 0.3s",
  },
};

export default App;
